<?xml version="1.0"?>
<node name="/org/storage/stratis3">
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg name="xml_data" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.ObjectManager">
    <method name="GetManagedObjects" />
  </interface>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg name="interface_name" type="s" direction="in" />
      <arg name="property_name" type="s" direction="in" />
      <arg name="value" type="v" direction="out" />
    </method>
    <method name="GetAll">
      <arg name="interface_name" type="s" direction="in" />
      <arg name="props" type="a{sv}" direction="out" />
    </method>
    <method name="Set">
      <arg name="interface_name" type="s" direction="in" />
      <arg name="property_name" type="s" direction="in" />
      <arg name="value" type="v" direction="in" />
    </method>
    <signal name="PropertiesChanged">
      <arg name="interface_name" type="s" />
      <arg name="changed_properties" type="a{sv}" />
      <arg name="invalidated_properties" type="as" />
    </signal>
  </interface>
  <!--
    The Manager interface is the top level interface. It manages the creation
    and destruction of pools and also exports various global properties.
  -->
  <interface name="org.storage.stratis3.Manager.r0">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Optional redundancy specification for the pool. -->
      <arg name="redundancy" type="(bq)" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unlock locked devices belonging to a specified pool. -->
    <method name="UnlockPool">
      <!-- UUID of the pool devices to unlock. -->
      <arg name="pool_uuid" type="s" direction="in" />
      <!-- Method to use to unlock the pool, may be "keyring" or "clevis". -->
      <arg name="unlock_method" type="s" direction="in" />
      <!--
        b: True if there was no error, and so the list is meaningful, otherwise
           false.
        as: Array containing the UUIDs of all the devices that were unlocked.
      -->
      <arg name="result" type="(bas)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to device encryption information.
        s: Stratis pool UUIDs
        a{sv}: Mapping of device UUIDs to values.
          s: Stratis device UUIDs
          v: Encryption information for the device
    -->
    <property name="LockedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <interface name="org.storage.stratis3.Manager.r1">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Optional redundancy specification for the pool. -->
      <arg name="redundancy" type="(bq)" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unlock locked devices belonging to a specified pool. -->
    <method name="UnlockPool">
      <!-- UUID of the pool devices to unlock. -->
      <arg name="pool_uuid" type="s" direction="in" />
      <!-- Method to use to unlock the pool, may be "keyring" or "clevis". -->
      <arg name="unlock_method" type="s" direction="in" />
      <!--
        b: True if there was no error, and so the list is meaningful, otherwise
           false.
        as: Array containing the UUIDs of all the devices that were unlocked.
      -->
      <arg name="result" type="(bas)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to device encryption information.
        s: Stratis pool UUIDs
        a{sv}: Mapping of device UUIDs to values.
          s: Stratis device UUIDs
          v: Encryption information for the device
    -->
    <property name="LockedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <interface name="org.storage.stratis3.Manager.r2">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Optional redundancy specification for the pool. -->
      <arg name="redundancy" type="(bq)" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Refresh the state of every running pool instance.
      This method is for troubleshooting and debugging only.
    -->
    <method name="RefreshState">
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Start a pool. -->
    <method name="StartPool">
      <!-- UUID of pool to be started. -->
      <arg name="pool_uuid" type="s" direction="in" />
      <!-- Unlock method to use if pool is encrypted
        b: True if an unlock method argument is being specified.
        s: Method to use to unlock the pool, may be "keyring" or "clevis".
      -->
      <arg name="unlock_method" type="(bs)" direction="in" />
      <!--
        b: True if the pool was started, otherwise false.
        o: Object path of the started pool.
        ao: Array of object paths of block devices belonging to the pool.
        ao: Array of object paths of filesystems belonging to the pool.
      -->
      <arg name="result" type="(b(oaoao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Stop a running pool. -->
    <method name="StopPool">
      <!-- Object path of pool to be stopped. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was stopped.
        s: UUID of the stopped pool.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to information about the
	devices associated with the UUID. These sets of devices may comprise
        a Stratis pool that can be started with the StartPool message.
        s: Stratis pool UUIDs
	    a{sv}: key/value mapping
          s: keys: possible values are "devs", "key_description", "clevis_info"
          v: Values for the keys:
	    "devs": always present, an array of mappings of device information
	      Contains two keys: "uuid" and "devnode"
	    "clevis_info": optional, not present if pool is unencrypted.
	      (bv): information about Clevis configuration for all devices
	        if b is true:
	          devices have consistent Clevis information
	          v = (bs): Clevis configuration information for all devices
	            b: if false, devices are not encrypted with Clevis
	            s: Clevis configuration
	        else:
	          devices have inconsistent Clevis configurations
	          v = s: error message explaining inconsistency
	    "key_description": optional, not present if pool is unencrypted.
	      (bv): information about kernel key encryption for all devices
	        if b is true:
	          devices have consistent key information
	          v = (bs): key information for all devices
	            b: if false, devices are not encrypted with a key
	            s: key description
	        else:
	          devices have inconsistent key information
	          v = s: error message explaining inconsistency
    -->
    <property name="StoppedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <interface name="org.storage.stratis3.Manager.r3">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Optional redundancy specification for the pool. -->
      <arg name="redundancy" type="(bq)" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Refresh the state of every running pool instance.
      This method is for troubleshooting and debugging only.
    -->
    <method name="RefreshState">
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Start a pool. -->
    <method name="StartPool">
      <!-- UUID of pool to be started. -->
      <arg name="pool_uuid" type="s" direction="in" />
      <!-- Unlock method to use if pool is encrypted
        b: True if an unlock method argument is being specified.
        s: Method to use to unlock the pool, may be "keyring" or "clevis".
      -->
      <arg name="unlock_method" type="(bs)" direction="in" />
      <!--
        b: True if the pool was started, otherwise false.
        o: Object path of the started pool.
        ao: Array of object paths of block devices belonging to the pool.
        ao: Array of object paths of filesystems belonging to the pool.
      -->
      <arg name="result" type="(b(oaoao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Stop a running pool. -->
    <method name="StopPool">
      <!-- Object path of pool to be stopped. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was stopped.
        s: UUID of the stopped pool.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to information about the
	devices associated with the UUID. These sets of devices may comprise
        a Stratis pool that can be started with the StartPool message.
        s: Stratis pool UUIDs
	    a{sv}: key/value mapping
          s: keys: possible values are "devs", "key_description", "clevis_info"
          v: Values for the keys:
	    "devs": always present, an array of mappings of device information
	      Contains two keys: "uuid" and "devnode"
	    "clevis_info": optional, not present if pool is unencrypted.
	      (bv): information about Clevis configuration for all devices
	        if b is true:
	          devices have consistent Clevis information
	          v = (bs): Clevis configuration information for all devices
	            b: if false, devices are not encrypted with Clevis
	            s: Clevis configuration
	        else:
	          devices have inconsistent Clevis configurations
	          v = s: error message explaining inconsistency
	    "key_description": optional, not present if pool is unencrypted.
	      (bv): information about kernel key encryption for all devices
	        if b is true:
	          devices have consistent key information
	          v = (bs): key information for all devices
	            b: if false, devices are not encrypted with a key
	            s: key description
	        else:
	          devices have inconsistent key information
	          v = s: error message explaining inconsistency
    -->
    <property name="StoppedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <interface name="org.storage.stratis3.Manager.r4">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Optional redundancy specification for the pool. -->
      <arg name="redundancy" type="(bq)" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Refresh the state of every running pool instance.
      This method is for troubleshooting and debugging only.
    -->
    <method name="RefreshState">
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Start a pool. -->
    <method name="StartPool">
      <!-- identifier of pool to be started -->
      <arg name="id" type="s" direction="in" />
      <!-- id type: "uuid" or "name" -->
      <arg name="id_type" type="s" direction="in" />
      <!-- Unlock method to use if pool is encrypted
        b: True if an unlock method argument is being specified.
        s: Method to use to unlock the pool, may be "keyring" or "clevis".
      -->
      <arg name="unlock_method" type="(bs)" direction="in" />
      <!--
        b: True if the pool was started, otherwise false.
        o: Object path of the started pool.
        ao: Array of object paths of block devices belonging to the pool.
        ao: Array of object paths of filesystems belonging to the pool.
      -->
      <arg name="result" type="(b(oaoao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Stop a running pool. -->
    <method name="StopPool">
      <!-- Object path of pool to be stopped. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was stopped.
        s: UUID of the stopped pool.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to information about the
	devices associated with the UUID. These sets of devices may comprise
        a Stratis pool that can be started with the StartPool message.
        s: Stratis pool UUIDs
	    a{sv}: key/value mapping
          s: keys: possible values are "devs", "key_description", "clevis_info"
          v: Values for the keys:
	    "devs": always present, an array of mappings of device information
	      Contains two keys: "uuid" and "devnode"
	    "clevis_info": optional, not present if pool is unencrypted.
	      (bv): information about Clevis configuration for all devices
	        if b is true:
	          devices have consistent Clevis information
	          v = (bs): Clevis configuration information for all devices
	            b: if false, devices are not encrypted with Clevis
	            s: Clevis configuration
	        else:
	          devices have inconsistent Clevis configurations
	          v = s: error message explaining inconsistency
	    "key_description": optional, not present if pool is unencrypted.
	      (bv): information about kernel key encryption for all devices
	        if b is true:
	          devices have consistent key information
	          v = (bs): key information for all devices
	            b: if false, devices are not encrypted with a key
	            s: key description
	        else:
	          devices have inconsistent key information
	          v = s: error message explaining inconsistency
    -->
    <property name="StoppedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <interface name="org.storage.stratis3.Manager.r5">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Refresh the state of every running pool instance.
      This method is for troubleshooting and debugging only.
    -->
    <method name="RefreshState">
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Start a pool. -->
    <method name="StartPool">
      <!-- identifier of pool to be started -->
      <arg name="id" type="s" direction="in" />
      <!-- id type: "uuid" or "name" -->
      <arg name="id_type" type="s" direction="in" />
      <!-- Unlock method to use if pool is encrypted
        b: True if an unlock method argument is being specified.
        s: Method to use to unlock the pool, may be "keyring" or "clevis".
      -->
      <arg name="unlock_method" type="(bs)" direction="in" />
      <!--
        b: True if the pool was started, otherwise false.
        o: Object path of the started pool.
        ao: Array of object paths of block devices belonging to the pool.
        ao: Array of object paths of filesystems belonging to the pool.
      -->
      <arg name="result" type="(b(oaoao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Stop a running pool. -->
    <method name="StopPool">
      <!-- Object path of pool to be stopped. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was stopped.
        s: UUID of the stopped pool.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to information about the
	devices associated with the UUID. These sets of devices may comprise
        a Stratis pool that can be started with the StartPool message.
        s: Stratis pool UUIDs
	    a{sv}: key/value mapping
          s: keys: possible values are "devs", "key_description", "clevis_info"
          v: Values for the keys:
	    "devs": always present, an array of mappings of device information
	      Contains two keys: "uuid" and "devnode"
	    "clevis_info": optional, not present if pool is unencrypted.
	      (bv): information about Clevis configuration for all devices
	        if b is true:
	          devices have consistent Clevis information
	          v = (bs): Clevis configuration information for all devices
	            b: if false, devices are not encrypted with Clevis
	            s: Clevis configuration
	        else:
	          devices have inconsistent Clevis configurations
	          v = s: error message explaining inconsistency
	    "key_description": optional, not present if pool is unencrypted.
	      (bv): information about kernel key encryption for all devices
	        if b is true:
	          devices have consistent key information
	          v = (bs): key information for all devices
	            b: if false, devices are not encrypted with a key
	            s: key description
	        else:
	          devices have inconsistent key information
	          v = s: error message explaining inconsistency
    -->
    <property name="StoppedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <interface name="org.storage.stratis3.Manager.r6">
    <!-- Create a single pool with the specified name and blockdevs. -->
    <method name="CreatePool">
      <!-- Name of the pool. -->
      <arg name="name" type="s" direction="in" />
      <!-- Device nodes of devices to form the pool -->
      <arg name="devices" type="as" direction="in" />
      <!-- Optional key description of the key to use to encrypt the pool -->
      <arg name="key_desc" type="(bs)" direction="in" />
      <!--
         Optional Clevis information to use to encrypt the pool.
         s: Clevis "pin" specification, "tang" or "tpm".
         s: pin-specific Clevis configuration
      -->
      <arg name="clevis_info" type="(b(ss))" direction="in" />
      <!--
         b: True if a pool was created, otherwise false.
         (oao): Result of the creation action, default values if no pool
            was created.
            o: Object path of the created pool.
            ao: Object paths of all the block devices in the pool.
      -->
      <arg name="result" type="(b(oao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Destroy the specified pool. -->
    <method name="DestroyPool">
      <!-- Object path of the pool to destroy. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was destroyed, otherwise false.
        s: UUID of the pool destroyed or a default value if no action was
           taken.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Return JSON representing the internal state of the daemon. The method
      signature is stable, but the JSON output format is not guaranteed to be
      stable.
    -->
    <method name="EngineStateReport">
      <!-- JSON output representing the engine state. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Return a list of the Stratis keys in the kernel keyring. -->
    <method name="ListKeys">
      <!-- Array of key descriptions. -->
      <arg name="result" type="as" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      Refresh the state of every running pool instance.
      This method is for troubleshooting and debugging only.
    -->
    <method name="RefreshState">
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Set a Stratis key in the kernel keyring. -->
    <method name="SetKey">
      <!-- Key description to assign to the set key. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- File descriptor through which to read the key data. -->
      <arg name="key_fd" type="h" direction="in" />
      <!--
        b: True if the key state was changed, otherwise false.
        b: True if the key was newly set in the keyring. False if a key with the
           given key description already existed.
      -->
      <arg name="result" type="(bb)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Start a pool. -->
    <method name="StartPool">
      <!-- identifier of pool to be started -->
      <arg name="id" type="s" direction="in" />
      <!-- id type: "uuid" or "name" -->
      <arg name="id_type" type="s" direction="in" />
      <!-- Unlock method to use if pool is encrypted
        b: True if an unlock method argument is being specified.
        s: Method to use to unlock the pool, may be "keyring" or "clevis".
      -->
      <arg name="unlock_method" type="(bs)" direction="in" />
      <!--
        b: True if the pool was started, otherwise false.
        o: Object path of the started pool.
        ao: Array of object paths of block devices belonging to the pool.
        ao: Array of object paths of filesystems belonging to the pool.
      -->
      <arg name="result" type="(b(oaoao))" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Stop a running pool. -->
    <method name="StopPool">
      <!-- identifier of pool to be stopped -->
      <arg name="id" type="s" direction="in" />
      <!-- id type: "uuid" or "name" -->
      <arg name="id_type" type="s" direction="in" />
      <!-- Object path of pool to be stopped. -->
      <arg name="pool" type="o" direction="in" />
      <!--
        b: True if the pool was stopped.
        s: UUID of the stopped pool.
      -->
      <arg name="result" type="(bs)" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!-- Unset a key in the kernel keyring. -->
    <method name="UnsetKey">
      <!-- Key description of the key to unset. -->
      <arg name="key_desc" type="s" direction="in" />
      <!-- b: True if the key was in the keyring, otherwise false. -->
      <arg name="result" type="b" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
    <!--
      a{sa{sv}}: Mapping of Stratis pool UUIDs to information about the
	devices associated with the UUID. These sets of devices may comprise
        a Stratis pool that can be started with the StartPool message.
        s: Stratis pool UUIDs
	    a{sv}: key/value mapping
          s: keys: possible values are "devs", "key_description", "clevis_info"
          v: Values for the keys:
	    "devs": always present, an array of mappings of device information
	      Contains two keys: "uuid" and "devnode"
	    "clevis_info": optional, not present if pool is unencrypted.
	      (bv): information about Clevis configuration for all devices
	        if b is true:
	          devices have consistent Clevis information
	          v = (bs): Clevis configuration information for all devices
	            b: if false, devices are not encrypted with Clevis
	            s: Clevis configuration
	        else:
	          devices have inconsistent Clevis configurations
	          v = s: error message explaining inconsistency
	    "key_description": optional, not present if pool is unencrypted.
	      (bv): information about kernel key encryption for all devices
	        if b is true:
	          devices have consistent key information
	          v = (bs): key information for all devices
	            b: if false, devices are not encrypted with a key
	            s: key description
	        else:
	          devices have inconsistent key information
	          v = s: error message explaining inconsistency
    -->
    <property name="StoppedPools" type="a{sa{sv}}" access="read" />
    <!-- stratisd version -->
    <property name="Version" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const" />
    </property>
  </interface>
  <!--
    The Report interface is an unstable interface for querying internal stratisd
    data structure state. It provides reports as JSON, and while the reports can
    be parsed programmatically, the names and schemas of provided reports do not
    follow the semantic versioning scheme that the rest of the D-Bus API does.
    The reports are subject to change at any time.
  -->
  <interface name="org.storage.stratis3.Report.r0">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.storage.stratis3.Report.r1">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.storage.stratis3.Report.r2">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.storage.stratis3.Report.r3">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.storage.stratis3.Report.r4">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.storage.stratis3.Report.r5">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <interface name="org.storage.stratis3.Report.r6">
    <!--
      This method allows fetching a report by name. If a report by the supplied
      name does not exist, an error is returned.
    -->
    <method name="GetReport">
      <!-- Name of the report. -->
      <arg name="name" type="s" direction="in" />
      <!-- s: Report. -->
      <arg name="result" type="s" direction="out" />
      <arg name="return_code" type="q" direction="out" />
      <arg name="return_string" type="s" direction="out" />
    </method>
  </interface>
  <node name="0" />
  <node name="1" />
  <node name="2" />
</node>
